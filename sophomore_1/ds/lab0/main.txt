IDE
Integrated Development Environment

Examples
Netbeans
Code::Blocks
Eclipse
CodeLite
Bluefish
Brackets Code Editor
Atom Code Editor
Sublime
JetBrains
Visual Studio
KDevelop
Geany IDE
Ajunta Devestudio

http://cpp.sh/

Using Visual Studio 2017


ex:

cout << "max value is: " << ret << endl;


VECTORS
(dynamic list)

**
#include <vector>

vector<int> A(4, 0);
// creates a vector called "A", and is of size 4, with each element assigned 0
// A: 0 0 0 0 (integer types)

A.resize(8, 2);
// expands vector A: now 
// A: 0 0 0 0 2 2 2 2

vector<int> B(3, 1);
// B: 1 1 1 (integer types)

for (int i = 0; i < B.size(); ++i) {
        A[i] = B[i] + 2;
        // A: 3 3 3 0 2 2 2 2 
}

A = B;
// 

return 0;
**


shallow copy and deep copy

vector<int> A;
vector<float> B;
vector<Rational> C;


vector<int>::iterator p = C.begin();
vector<int>::iterator q = C.end();

instead of heaving to type iterator everytime, you can define a type for it

typedef vector<int>::iterator iterator;

then you can do:
iterator p = C.begin();
iterator q = C.end();


dereferencing operator *p (reference to object which p points)
iterator ++p (next element after p)
iterator --p (element before p)


vector<int> List(3);
List[0] = 100;
List[1] = 101;
List[2] = 102;
iterator p = List.begin();
// *p = 100
// *(++p) = 101
// *(--p) = 100

reverse_iterator q = List.rbegin();
// *q = 102


vector<string> A;
A[0]: "a"


Exercises

implement vector<int> cat(vector<int> A, vector<int> B), which returns the concatenation of A and B.


